/**
 * Teste do algoritmo Deutsch-Jozsa corrigido
 */

import { deutschJozsaAlgorithm, exampleFunctions, runDeutschJozsaExample } from './interface/src/algorithms/DeutschJozsa.js';

console.log('üî¨ Testando Algoritmo Deutsch-Jozsa Corrigido...\n');

// Teste 1: Fun√ß√£o constante 0
console.log('üìä Teste 1: Fun√ß√£o Constante (sempre 0)');
try {
  const result1 = deutschJozsaAlgorithm(exampleFunctions.constant0, 2);
  console.log(`Resultado: ${result1.result}`);
  console.log(`Medi√ß√µes: [${result1.measurements.join(', ')}]`);
  console.log(`Esperado: Constante - ${result1.result === 'Constante' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 2: Fun√ß√£o constante 1
console.log('üìä Teste 2: Fun√ß√£o Constante (sempre 1)');
try {
  const result2 = deutschJozsaAlgorithm(exampleFunctions.constant1, 2);
  console.log(`Resultado: ${result2.result}`);
  console.log(`Medi√ß√µes: [${result2.measurements.join(', ')}]`);
  console.log(`Esperado: Constante - ${result2.result === 'Constante' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 3: Fun√ß√£o balanceada (primeiro bit)
console.log('üìä Teste 3: Fun√ß√£o Balanceada (primeiro bit)');
try {
  const result3 = deutschJozsaAlgorithm(exampleFunctions.balancedFirstBit, 2);
  console.log(`Resultado: ${result3.result}`);
  console.log(`Medi√ß√µes: [${result3.measurements.join(', ')}]`);
  console.log(`Esperado: Balanceada - ${result3.result === 'Balanceada' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 4: Fun√ß√£o balanceada (paridade)
console.log('üìä Teste 4: Fun√ß√£o Balanceada (paridade)');
try {
  const result4 = deutschJozsaAlgorithm(exampleFunctions.balancedParity, 2);
  console.log(`Resultado: ${result4.result}`);
  console.log(`Medi√ß√µes: [${result4.measurements.join(', ')}]`);
  console.log(`Esperado: Balanceada - ${result4.result === 'Balanceada' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 5: Fun√ß√£o balanceada (n√∫mero √≠mpar de 1s)
console.log('üìä Teste 5: Fun√ß√£o Balanceada (n√∫mero √≠mpar de 1s)');
try {
  const result5 = deutschJozsaAlgorithm(exampleFunctions.balancedOddOnes, 2);
  console.log(`Resultado: ${result5.result}`);
  console.log(`Medi√ß√µes: [${result5.measurements.join(', ')}]`);
  console.log(`Esperado: Balanceada - ${result5.result === 'Balanceada' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 6: Teste com 3 qubits
console.log('üìä Teste 6: Fun√ß√£o com 3 qubits');
try {
  const result6 = deutschJozsaAlgorithm(exampleFunctions.constant0, 3);
  console.log(`Resultado: ${result6.result}`);
  console.log(`Medi√ß√µes: [${result6.measurements.join(', ')}]`);
  console.log(`Esperado: Constante - ${result6.result === 'Constante' ? '‚úÖ CORRETO' : '‚ùå ERRO'}\n`);
} catch (error) {
  console.log(`‚ùå Erro: ${error.message}\n`);
}

// Teste 7: Verifica√ß√£o manual das fun√ß√µes
console.log('üìä Teste 7: Verifica√ß√£o manual das fun√ß√µes');
console.log('Fun√ß√£o constant0:');
console.log(`  f("00") = ${exampleFunctions.constant0("00")}`);
console.log(`  f("01") = ${exampleFunctions.constant0("01")}`);
console.log(`  f("10") = ${exampleFunctions.constant0("10")}`);
console.log(`  f("11") = ${exampleFunctions.constant0("11")}`);

console.log('\nFun√ß√£o balancedFirstBit:');
console.log(`  f("00") = ${exampleFunctions.balancedFirstBit("00")}`);
console.log(`  f("01") = ${exampleFunctions.balancedFirstBit("01")}`);
console.log(`  f("10") = ${exampleFunctions.balancedFirstBit("10")}`);
console.log(`  f("11") = ${exampleFunctions.balancedFirstBit("11")}`);

console.log('\nFun√ß√£o balancedParity:');
console.log(`  f("00") = ${exampleFunctions.balancedParity("00")}`);
console.log(`  f("01") = ${exampleFunctions.balancedParity("01")}`);
console.log(`  f("10") = ${exampleFunctions.balancedParity("10")}`);
console.log(`  f("11") = ${exampleFunctions.balancedParity("11")}`);

console.log('\n‚úÖ Testes do Deutsch-Jozsa conclu√≠dos!');
console.log('\nüìù Observa√ß√µes:');
console.log('- O algoritmo deve identificar corretamente fun√ß√µes constantes vs balanceadas');
console.log('- Fun√ß√µes constantes sempre resultam em medi√ß√µes [0, 0, ...]');
console.log('- Fun√ß√µes balanceadas resultam em pelo menos um 1 nas medi√ß√µes');
console.log('- O algoritmo √© determin√≠stico e sempre correto para este problema');
